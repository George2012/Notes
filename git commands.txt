https://git-scm.com/
https://github.com/

$GitBash:
Pwd
Cd
$ git config --global user.name "George Pliner"
$ git config --global user.email "george.pliner@gmail.com"
$ git config --global --list

$ git clone https://github.com/George2012/github-demo.git
$ ls
$ git status
$ echo "Test" >> start.txt

$ cat start.txt
$ git add start.txt
$ git commit -m "text description"

$ git push origin master.

https://notepad-plus-plus.org/
Add C:\Program Files (x86)\Notepad++ to path env variable

From user profile home directory
Notepad++ .bash_profile //configure BASH alias
https://coderwall.com/p/_-ypzq/git-bash-fixing-it-with-alias-and-functions
alias npp='notepad++.exe -multiInst -nosession'

Restart gitbash

~/.gitconfig
Git config --global
Git config --global --list
Git config --global -e (edit configuration file using default editor)

Command Listing
notepad++ # testing to make sure it works
notepad++ .bashrc # see contents of .bashrc file below
npp # testing npp alias
git config --global core.editor "notepad++.exe -multiInst -nosession"
npp .gitconfig # open Git config file, should contain snip below
~/.bashrc File
alias npp='notepad++.exe -multiInst -nosession'
~/.gitconfig File (snip)
[core]
editor = notepad++.exe -multiInst -nosession
Mac OS X: TextMate 2
On the Mac, TextMate 2 is a freely available text editor that works a bit better than TextEdit.
Command Listing
git config --global --list # before
git config --global core.editor "mate -w"
git config --global --list # after
mate .gitconfig # compare with snip below
~/.gitconfig File (snip)
[core]
editor = mate -w  


$git init new-project
$git status
$git add filename
$git commit

$git init existing-folder
$git add . (add all files)
$git commit -m “text message”

In github:
Fork to you space
$git clone https://github.com/<usernsame>/<project>
$git add <filename>
$git pull origin master
$git push origin master
notepad++ ~/.gitconfig
$git commit -am “adding text”
$git ls-files

//add file
$git add <filename>
$git add .    #add all files
$git reset HEAD <filename>  # unstage file
$git checkout -- <filename>  revert the file

//rename file 
$git mv <current_file_name> <new_file_name>   //rename from git	

mv <current_file_name> <new_file_name>		  //rename from bash
$git add -A
$git add -u

//deleteing files
$git ls-files
$git rm filename
$git commit -m "text"
$git reset HEAD filename //undo deleteion in git
$git checkout -- filename //reverts file
$git add -A // add all deletion to git

//history
$git help log
q
$git log
q
$git log --oneline --graph --decorate
$git log --since="3 days ago"
$git log -- filename //history on specific file
$git log --follow -- filename //follow renames on file
$git show <commitId>

//alias
$git config --global alias.<new command name> "[without git]new command" //configure git commands
Notepad++ .bash_profile 												 //configure BASH alias
npp ~/.gitconfig

//ignoring files
npp .gitignore
<filename>
*.<ext>
<folder>/

$git add .gitignore
$git commit -m ""

//cleanup
$git pull origin master
$git commit -m "text"
$git push origin master

//Visual diff
//p4merge install and config
https://www.perforce.com/downloads
select only p4merge
add "C:\Program Files\Perforce" to path env
open git bash:
p4merge

$git config --global merge.tool p4merge
$git config --global mergetool.p4merge.path "C:/Program Files/Perforce/p4merge.exe"
$git config --global mergetool.prompt false

$git config --global diff.tool p4merge
$git config --global difftool.p4merge.path "C:/Program Files/Perforce/p4merge.exe"
$git config --global difftool.prompt false

$git config --global --list
$git config --global -e  //view config in default editor

//compare between working directory and staging area
git diff
git difftool

//compare between working directory and last commit
git diff HEAD
git difftool HEAD

//compare between staging area and repository
git diff --staged HEAD

//compare 1 file
git diff -- <file_path>
git difftool -- <file_path>

//compare 2 commits
git log --oneline
git diff <ref1> <ref2> 
git diff <ref1> HEAD //compare to last commit 
git difftool <ref1> HEAD //compare to last commit 
git diff HEAD HEAD^ //compare HEAD to HEAD-1 

//compare local and remote
git diff master origin/master

//branches
git branch -a
git branch mynewbranch   //create branch
git checkout mynewbranch //switch to new branch
git branch -mynewbranch newbranch //rename(move) branch
git branch -d newbranch //delete branch
git checkout -b newbranch //create and switch to new branch

//merge to master
git checkout master
//compare branches
git diff     master newbranch
git difftool master newbranch

git merge newbranch		//merge from newbranch into master
git branch -d newbranch //delete all branch 

git merge newbranch	-no-ff	//merge from newbranch into master
git merge new branch -m "Merge changes"

//conflicts
git mergetool //configure p4merge
git commit -m "resolve merge conflicts"
//add *.orig to .gitignore

//rebase
git branch -d myfeature
git rebase master

//rebase with conflict
git rebase --abort

git rebase master
git mergetool
git rebase --continue
git checkout master
git merge myfeature

//pull with rebase
git fetch origin master
git pull --rebase orogon master

//STASH
git stash
git stash apply //unstash
git stash list
git stash drop //drop the last stash
git stash -u //stash also untracked files
git stash pop //apply + drop

git stash save "simple changes 1" //multiple stashes
git stash save "simple changes 2"
git stash show stash@{1}
git stash list
git stash apply stash@{1}
git stash drop stash@{1}
git stash clear //remove all stashes

//stash into branch 
git stash -u 
git stash branch <name_of_the_branch>
git add .

//taging
git tag myTag
git tag --list
git show myTag
git tag --delete myTag
//annotated tags
git tag -a v-1.0
//compare tags
git tag -a v-1.1
git tag -a v-1.1 -m "Relese 1.2"
git diff v-1.0 v-1.1
git difftool v-1.0 v-1.1
//tag specific commit
git tag -a v-0.9-beta <commit number>
//push tags
git push origin v-1.0 //push specific tag
git push origin master --tags //push all tags
git push origin :v-0.9-beta// clear remote tag

//reset
git reset HEAD^1 //revert last commit
git reflog

/cherry-pick
git cherry-pick <commit number>

git version